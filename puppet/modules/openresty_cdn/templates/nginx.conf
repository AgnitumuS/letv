worker_processes  1;

error_log /dev/null error;
#error_log logs/error.log error;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  off;

    sendfile       on;
    tcp_nopush     on;

    keepalive_timeout  65;

    lua_shared_dict tokens_black_list 10m;
    lua_shared_dict tokens_black_list_value 10m;
    lua_shared_dict cname_cache 10m;

    init_worker_by_lua '
        
        local delay = 3 * 60 
        local handler

        handler = function (premature)
            local tokens_black_list_value =  ngx.shared.tokens_black_list_value
             
            local succ, err, forcible = tokens_black_list_value:set("refresh_tokens_black_list", 1)
            if premature then
                return
            end
             
            local ok, err = ngx.timer.at(delay, handler)
             
            if not ok then
                ngx.log(ngx.ERR, "failed to create the timer: ", err)
                return
            end
        end

        local ok, err = ngx.timer.at(delay, handler)
        
        if not ok then
            log(ERR, "failed to create timer: ", err)
            return
        end

    ';
 
    server {
        listen       19890;
        server_name  localhost;


        location / {
            root   html;
            index  index.html index.htm;
        }

        location = /live/secure/tokens_veirfy {
            error_log logs/error.log error;
            content_by_lua '
                local tokens_black_list = ngx.shared.tokens_black_list
                local tokens_black_list_value =  ngx.shared.tokens_black_list_value
                local args = ngx.req.get_uri_args() 
                local keys = tokens_black_list:get_keys(0)

                if ngx.var.args == nil then
                   	return 403
                end


		for k, v in pairs(keys) do
		   	if v ~= nil then
				if args[v] ~= nil then
					local res = tokens_black_list_value:get(v .. args[v])
					if res == 1 then
					        ngx.exit(403)	
					end
				end
                   	end 
                end
               
            ';

            post_action /live/secure/get_tokens_black_list;

        }

        location = /live/secure/get_tokens_black_list {
            content_by_lua '
                local tokens_black_list = ngx.shared.tokens_black_list
                local tokens_black_list_value =  ngx.shared.tokens_black_list_value

                local args

                _, args = string.find(ngx.var["request_uri"],"?")

                ngx.log(ngx.ERR, "ngx request uri: ", string.sub(ngx.var["request_uri"], args + 1))

                res = ngx.location.capture("/live/secure/report_tokens_ip_proxy?"..string.sub(ngx.var["request_uri"], args + 1))

                if res.status ~= 200 then
                    ngx.log(ngx.ERR, "report_tokens_ip_proxy error", res.status);
                end
                 
                -- be careful,lock needed
                local value, flags = tokens_black_list_value:get("refresh_tokens_black_list")

                if not value then
                    ngx.say("OK")
                    return
                end

                tokens_black_list_value:delete("refresh_tokens_black_list")

                local res = ngx.location.capture("/live/secure/get_tokens_black_list_proxy")
                ngx.say(res.body)

                for token in string.gmatch(res.body, "([^,]+)") do
                    local key = ngx.re.sub(token, "^(.*)=(.*)$", "$1")
                    local value = ngx.re.sub(token, "^(.*)=(.*)$", "$2")
                    tokens_black_list:set(key, 1, 3 * 60)
                    tokens_black_list_value:set(key..value, 1, 3 * 60)
                    ngx.log(ngx.ERR, "get tokens black list, key: ", key, " value: ", value)
                end

            ';
        }

        location = /live/secure/get_tokens_black_list_proxy {
            proxy_connect_timeout 4s;
            proxy_send_timeout    4s;
            proxy_read_timeout    4s;
            proxy_pass http://tokensec.letv.cn;
            #proxy_pass http://127.0.0.1:19890/test.html;
        }

        location = /live/secure/report_tokens_ip_proxy {
            proxy_connect_timeout 4s;
            proxy_send_timeout    4s;
            proxy_read_timeout    4s;
            proxy_pass http://tokensec.letv.cn;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

    }
  
    include domains/kukuplay_com.conf;
}
