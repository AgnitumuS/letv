
upstream upstream_kan2_video_anyan_com {
   server live.api.play.ulucu.com;
}

server {
   listen 80;
   server_name kan2.video.anyan.com;

   proxy_connect_timeout 30s;
   proxy_send_timeout    45s;
   proxy_read_timeout    45s;

   location ~ ^/.*/node_hash$ {
	proxy_set_header Host $http_host;
	rewrite ^/(.*)/node_hash$ /$1 break;
	proxy_pass http://ats_backend;
   }

   location / {
        proxy_set_header Host $http_host;
        proxy_pass http://node_backend$uri/node_hash$is_args$args;
        #proxy_pass http://127.0.0.1$uri/node_hash$is_args$args; #only for test
    }
}

server {
    listen 16688;
    server_name  kan2.video.anyan.com;

    proxy_connect_timeout 30s;
    proxy_send_timeout    45s;
    proxy_read_timeout    45s;

    location /scheduling_interface {
	rewrite ^/scheduling_interface/(.*)$ /$1 break;
        proxy_set_header Host "live.api.play.ulucu.com";
	proxy_pass http://upstream_kan2_video_anyan_com;
    }

    location @intercept_404 {
	set $cache_key $http_host$uri$is_args$arg_device_sn&$arg_rate&$arg_channel_id;

	rewrite_by_lua '
		local interface_cache = ngx.shared.interface_cache
                interface_cache:delete(ngx.var.cache_key)
	';

	if ($http_trycount = 1) { 
		return 404; 
	}
		
        proxy_set_header Host $http_host;
	proxy_set_header trycount 1;
	proxy_pass http://127.0.0.1:16688;
    }

    location ~ live_ts.cgi$ {
	expires 60s;
	proxy_pass http:/$uri$is_args$args;	
    }

    location /live/stream {

	proxy_intercept_errors on;

        error_page 404 = @intercept_404;

        expires 0s;
        
	set $forward_url "";
	set $ip_port "";
	set $cache_key $http_host$uri$is_args$arg_device_sn&$arg_rate&$arg_channel_id;
	set $interface_cache "";

	rewrite_by_lua '


		local interface_cache = ngx.shared.interface_cache
		local scheduling_url = interface_cache:get(ngx.var.cache_key)
		local cache_status = "HIT"

		if scheduling_url == nil then
			cache_status = "MISS"
			local res = ngx.location.capture("/scheduling_interface"..ngx.var.uri..ngx.var.is_args..ngx.var.args)
			if res.status ~= 200 then
				ngx.exit(res.status)
			end

			local cjson = require "cjson"
			local scheduling_information = cjson.decode(res.body)

			local scheduling_code = scheduling_information["code"]
			if scheduling_code ~= 0 then
				ngx.say(res.body)
			end

			local scheduling_msg = scheduling_information["msg"]
			if scheduling_msg ~= "ok" then
				ngx.say(res.body)
			end

			scheduling_url = scheduling_information["data"]["m3u8url"]
			interface_cache:set(ngx.var.cache_key, scheduling_url, 0)
		end

		ngx.var.interface_cache = "interface_cache_key="..ngx.var.cache_key.."&interface_cache_status="..cache_status
		ngx.var.forward_url = scheduling_url

		local regex = "http://([^/]+)/.*"
		local m = ngx.re.match(ngx.var.forward_url, regex)
		ngx.var.ip_port = m[1]
    	';

	subs_filter_types */* application/x-mpegURL; 
	subs_filter (^live_ts.cgi?.*$)    http://$http_host/$ip_port/$1 ir;
	
	add_header INTERFACE_CACHE $interface_cache;
	
        proxy_set_header X-From-Cdn LECloud;
        proxy_pass $forward_url;
    }
}


