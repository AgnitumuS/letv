回顾:
1.循环:反复执行一段相同或相似的代码
2.循环三要素:
  1)循环变量的初始化
  2)循环的条件(以循环变量为基础)
  3)循环变量的改变(向着循环的结束变)
  循环变量:在循环过程中所改变的那个量
3.循环结构:
  1)while:先判断后执行，有可能一次都不执行
  2)do...while:先执行一次再判断，至少执行一次
               第1要素与第3要素相同时，首选
  3)for:应用率最高
4.break:跳出循环，应用率很高
  continue:跳过循环体中剩余语句而进入下一次循环





int i=0;
while(i<10){
  i++;
}
System.out.println(i); //10


int i;
for(i=0;i<10;i++){
}
System.out.println(i); //10










正课:
1.三种循环结构的更佳适用情况:
  1)while:"当..."循环
  2)do...while:"直到..."循环
               第1要素与第3要素相同时首选
  3)for:固定次数循环，应用率最高
2.嵌套循环:
  1)循环中套循环，一般多行多列时使用，
    外层控制行，内层控制列
  2)执行过程:外层循环走一次，内层循环走所有次
  3)建议:嵌套层次越少越好(一般最多2层循环)
         若必须要通过3层以上才能解决，说明设计有问题
  4)break只能跳出一层循环
3.程序=算法+数据结构
    算法:解决问题的流程/步骤(顺序、分支、循环...)
    数据结构:将数据按照某种特定的结构来保存
             数怎么存
      设计良好的数据结构会导致好的算法
4.数组:
  1)相同数据类型元素的集合
  2)数组是一种数据类型(引用类型)
  3)数组的定义:
      int[] arr = new int[4];
  4)数组的初始化:
      int[] arr = new int[3];       //0,0,0
      int[] arr = {1,4,7};          //1,4,7
      int[] arr = new int[]{1,4,7}; //1,4,7
      int[] arr;
      arr = {1,4,7}; //编译错误，此方式只能声明的同时初始化
      arr = new int[]{1,4,7}; //正确
  5)数组的访问:
    5.1)通过数组名.length可以获取数组的长度
          int[] arr = new int[3];
	  System.out.println(arr.length); //3
    5.2)通过索引/下标来访问数组中的元素
        下标从0开始，最大到arr.length-1
	  int[] arr = new int[3];
	  arr[0]=100; //给第1个元素赋值为100
	  arr[1]=200; //给第2个元素赋值为100
	  arr[2]=300;
	  arr[3]=400; //数组下标越界异常
	  System.out.println(arr[arr.length-1]); //输出最后一个元素的值
  6)数组的遍历:
      int[] arr = new int[10];
      for(int i=0;i<arr.length;i++){
        arr[i] = 100;
      }
      for(int i=0;i<arr.length;i++){ //正序
        System.out.println(arr[i]);
      }
      for(int i=arr.length-1;i>=0;i--){ //倒序
        System.out.println(arr[i]);
      }
  7)数组的复制:
      System.arraycopy(a,1,a1,0,4);
      int[] a1 = Array.copyOf(a,6);
      a = Arrays.copyOf(a,a.length+1); //扩容
  8)数组的排序:
      Arrays.sort(arr); //升序
      冒泡的工作原理:
        8.1)4个数冒三轮
        8.2)每一轮都是从第1个元素开始冒，
	    每一次都是和它的下一个元素比
        8.3)冒出来的数就不带它玩了


任务:
1)3个经典案例至少重做一次:
    九九乘法表
    找最大值并放在最后一位
    冒泡排序
2)课后作业


当日事当日毕


























BubbleSort





     arr.length-1-i
i=0  比3次
i=1  比2次
i=2  比1次

for(int i=0;i<arr.length-1;i++){ //控制轮数
  for(int j=0;j<arr.length-1-i;j++){ //控制每轮的次数
    if(arr[j]>arr[j+1]){ 
      int t=arr[j];
      arr[j]=arr[j+1];
      arr[j+1]=t;
    }
  }
}

int[] arr = {45,23,1,18};  //升序
第一轮:
  45和23比，换，23,45,1,18
  45和1比，换，23,1,45,18
  45和18比，换，23,1,18,45------45冒出来了
第二轮:
  23和1比，换，1,23,18,45
  23和18比，换，1,18,23,45------23冒出来了
第三轮:
  1和18比，不换，1,18,23,45-----18冒出来了



















计时操作


long a = System.currentTimeMillis();
快速排序
long b = System.currentTimeMillis();

System.out.println(b-a); //排序消耗的毫秒数











不同的数据，最终的结果也是不一样的

10万个数据----------插入排序最快
10万个数据----------冒泡排序最快
10万个数据----------快速排序最快
















数组的长度是固定的，
通过Arrays.copyOf()可以实现数组的扩容(扩大容量)



int[] a = new int[5];














int[] a = {10,20,30,40,50};
int[] a1 = new int[6];

for(int i=0;i<a.length;i++){
  a1[i]=a[i];
}

a1[0] = a[0];
a1[1] = a[1];
a1[2] = a[2];
a1[3] = a[3];
a1[4] = a[4];









int[] arr = {23,45,87,4};
找最大值的算法:
1.假设第1个元素为最大值
  int max = arr[0];
2.遍历剩余元素，将剩余元素与max做对比，
  若剩余元素大于max，修改max为较大的数
  for(int i=1;i<arr.length;i++){
    if(arr[i]>max){
      max=arr[i];
    }
  }

max=23
i=1 max=45
i=2 max=87
i=3















int[] arr = new int[6];
System.out.println(arr[5]);
System.out.println(arr[4]);
System.out.println(arr[3]);
System.out.println(arr[2]);
System.out.println(arr[1]);
System.out.println(arr[0]);














for(int i=0;i<arr.length;i++){
  arr[i] = 100;
}

i=0 arr[0]=100
i=1 arr[1]=100
i=2 arr[2]=100







arr[0] = 100;
arr[1] = 100;
arr[2] = 100;
arr[3] = 100;
arr[4] = 100;
arr[5] = 100;




























int[] arr = new int[3];
arr[0] = 100;
arr[1] = 200;
arr[2] = 300;
arr[3] = 400; //数组下标越界异常

















int[] arr = new int[3];
arr[0]-----第1个元素,int型
arr[1]-----第2个元素,int型
arr[2]-----第3个元素,int型




int a=0;
int b=0;
int c=0;
b=100; //给第2个数赋值为100












//声明boolean型数组flags，包含26个元素
//每个元素都是boolean型，默认值为false
boolean[] flags = new boolean[26];




















//声明double型数组dou，包含10个元素
//每个元素都是double型，默认值为0.0
double[] dou = new double[10];
















//声明int型数组arr，包含4个元素
//每个元素的类型都是int，默认值为0
int[] arr = new int[4];















int   a = 5;
int[] a = new int[4];









int和int[]----完全不同的两种类型













int   a; //声明整型变量a
int[] a; //声明整型数组变量a

















一万本书按照出版社来保存----设计数据结构
找java编程思想---------------不会导致算法的简单


一万本书按照图书类别来保存---设计数据结构
找java编程思想---------------算法一定是简单的









想一下子跳出所有层循环，这样的需求----没有









6000次

i=1
  j=1
    k=30次
  j=2
    k=30次
i=2
  j=1/2/3/.../19/20
  
6000000000

保留字

for(int i=1;i<=1000;i++){
  for(int j=1;j<=2000;j++){
    for(int k=1;k<=3000;k++){
      if(boolean){
        break;
      }
      System.out.println("aaa");
    }
  }
}











MultiTable

\t:制表符

1*9=9   2*9=18  3*9=27  














