回顾:
1.适用情况:while:当 do...while:直到 for:固定次数
2.嵌套循环:越少越好 外层一次内层所有次 break只跳出一层循环
3.数组:
  1)相同数据类型元素的集合
  2)是一种数据类型(引用类型)
  3)int[] arr = new int[4]; //0,0,0,0
  4)int[] arr = {1,4,7};
    int[] arr = new int[]{1,4,7};
  5)System.out.println(arr.length);
    下标从0开始，最大到arr.length-1
    arr[0] = 100;
    System.out.println(arr[arr.length-1]);
    arr[4] = 400; //数组下标越界异常
    for(int i=0;i<arr.length;i++){
      arr[i] = 100;
      System.out.println(arr[i]);
    }
  6)System.arraycopy(a,1,a1,0,4);
    int[] a1 = Arrays.copyOf(a,6);
    a = Arrays.copyOf(a,a.length+1);
  7)Arrays.sort(arr); //升序
    原理:
      4个数冒3轮
      每轮都从第1个开始冒，每一次都和它下一个元素比
      冒出来的就不带它玩了


double a = Math.sqrt(25);

100
  %2/3/4/.../98/99
  %2/3/4/.../49/50
  %2/3/4/.../9/10

11到99


100的平方根10
81的平方根9
36的平方根6
25的平方根5












100%51/52/53/54........-----不得0







质数:素数，只能被1和它本身整除的数


不是质数:只要有得0的
是质数:所有都不得0

并非一次判断得到最终结果-----------开关(3步)


5是质数
  5%2/3/4------------------都不得0
7是质数
  7%2/3/4/5/6--------------都不得0
8不是质数
  8%2/3/4/5/6/7------------只要有得0
9不是质数
  9%2/3/4/5/6/7/8----------只要有得0

int num = 8;
for(int i=2;i<num;i++){ //2/3/4/5/6/7
  if(num%i==0){
    System.out.println("不是质数");
    break;
  }else{
    System.out.println("是质数");
  }
}







笔记:
1.方法:函数/过程
  1)用于封装一段特定的逻辑功能
  2)方法尽可能的独立(一个方法只干一件事)
  3)方法可以被反复的调用多次
  4)避免代码的重复，便于代码的维护，有利于团队协作开发
2.方法的定义:
    修饰词 返回值类型 方法名(参数列表){
      方法体
    }
    方法可以有参也可以无参，但有参更灵活
    方法可能有返回值也可以没有返回值
      无返回值时，返回值类型写为void
      有返回值时，返回值类型写为特定的数据类型
3.方法的调用:
  1)无返回值方法:
      方法名(有参传参);
  2)有返回值方法:
      数据类型 变量 = 方法名(有参传参);
4.return:
  1)return 值; //1.结束方法的执行  2.返回一个值给调用方法
  2)return; //1.结束方法的执行(只能用在void的方法中)


猜字符小游戏:
1.设计数据结构:数据--变量
  1)char[] chs;   //随机生成的字符数组
  2)char[] input; //用户输入的字符数组
  3)int[] result; //对比的结果
  4)int score; //得分
    int count; //猜错的次数

2.设计程序结构:方法
  1)主方法:
    public static void main(String[] args){
      
    }
  2)随机生成字符数组:
    public static char[] generate(){
      char[] chs = new char[5];
      //
      return chs;
    }
  3)对比:随机字符数组与用户输入的字符数组
    public static int[] check(char[] chs,char[] input){
      int[] result = new int[2];
      //
      return result;
    }

3.设计算法:方法的实现

任务:
1.完成猜字符小游戏
  要求:
    至少独立完成generate()和check()方法


每周一做----3个编程题必须掌握
























对基本类型判断相等，用==
对引用类型判断相等

String:引用类型









输入exit则退出
if(){
  break;
}



什么算全对?

2. 位置对为5
3. 字符对为5，并且，位置对为5











int a = scan.nextInt();
double b = scan.nextDouble();
String s = scan.next();
char[] input = s.toCharArray();






"ABCDE"
input[0]='A'
input[1]='B'
input[2]='C'
input[3]='D'
input[4]='E'


public static char[] generate(){
  char[] chs = new char[5]; //随机字符数组

  char[] letters = {'A','B','C','D',...,'Z'};
  boolean[] flags = new boolean[letters.length];

  for(int i=0;i<chs.length;i++){
    do{
      int index = (int)(Math.random()*25);
    }while(flags[index]==true);
    chs[i] = letters[index];
    flags[index]=true;
  }
  i=0 index=0  chs[0]='A' flags[0]=true 
  i=1 index=25 chs[1]='Z' flags[25]=true
  i=2 index=0/25/0/25/0/25/1 chs[2]='B' flags[1]=true
  i=3 index=0/1/25/0/1/25
  i=4

  return chs;
}


Math.random()-----0.0到0.99999.....


















public static int[] check(char[] chs,char[] input){
  int[] result = new int[2]; //0,0----result[0]为位置对，result[1]为字符对
  
  for(int i=0;i<chs.length;i++){
    for(int j=0;j<input.length;j++){
      if(chs[i]==input[j]){ //字符对
        result[1]++; //字符对个数增1
	if(i==j){ //位置对
	  result[0]++; //位置对个数增1
	}
	break;
      }
    }
  }
  i=1
    j=0 chs1和input0
    j=1 chs1和input1
    j=2 chs1和input2
    j=3 chs1和input3
    j=4 chs1和input4
  i=0
    j=0 chs0和input0
    j=1 chs0和input1
    j=2 chs0和input2
    j=3 chs0和input3
    j=4 chs0和input4


  return result;
}











Guessing











public static void main(String[] args){
  say();
  sayHi("zhangsan"); //String name="zhangsan"
  double a = getNum(); 输出a的值--8.88
  int b = plus(5,6); 输出b的值----11
  int m=5,n=6;
  int num = plus(m,n); 输出num的值----11
}
public static void say(){}
public static void sayHi(String name){}
public static double getNum(){
  return 8.88;
}
public static int plus(int a,int b){
  return a+b;
}















并非所有方法都是在main中调用的
也可以方法中再调方法


检查密码(){
  //....
}
查余额(){
  调检查密码()
}
取(){
  调检查密码()
}
转帐(){
  调检查密码()
}









方法可以有参数，也可以没有参数
------有参可以使方法更灵活


System.out.         println("HelloWorld");
System.             arraycopy(a,1,a1,0,4);
Arrays.             sort(arr);
double d = Math.    sqrt(25);
int[]  e = Arrays.  copyOf(a,6);  有参

int    a = scan.    nextInt();
double b = scan.    nextDouble();
double c = Math.    random(); //无参




double c = Math.random();
double d = Math.sqrt(25);

sqrt()------想求谁的平方根就求谁的平方根
random()----只能0到0.999999之间的随机数

假设random()有参数
  double d = Math.random(1,1000);



MethodDemo





方法可以有返回值，也可以没有返回值
没有返回值时，返回值类型写为void
有返回值时，返回值类型写为特定的数据类型


方法执行完之后，需要用到方法中的某个数据
--------------------有返回值






System.out.println("HelloWorld");
System.arraycopy(a,1,a1,0,4);
Arrays.sort(arr); //无返回值

int    a = scan.nextInt();
double b = scan.nextDouble();
double c = Math.random();
double d = Math.sqrt(25);
int[]  e = Arrays.copyOf(a,6); //有返回值















main(){
  张三，李四
}

张三
李四
王五









4个小组，每个小组有5个人











sort(){
  冒泡6句话
}


调sort()10次










排序-----6句话






a(){
  取
}
b(){
  存
}
c(){
  转帐
}

张三--------调a()和b()和c()
李四--------调b()
王五--------调c()










main(){
  调存钱---1句
  调取钱---1句
  调转帐---1句
}
存钱(){
  500句
}
取钱(){
  500句
}
转帐(){
  1000句
}








